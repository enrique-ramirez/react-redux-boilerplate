// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`todos duck sagas completeTodoSaga should call COMPLETE_TODO.ERROR on error 1`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [
      Object {},
    ],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas completeTodoSaga should call COMPLETE_TODO.ERROR on error 2`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [
      undefined,
      EntitySchema {
        "_getId": [Function],
        "_idAttribute": "id",
        "_key": "todos",
        "_mergeStrategy": [Function],
        "_processStrategy": [Function],
        "schema": Object {
          "category": EntitySchema {
            "_getId": [Function],
            "_idAttribute": "id",
            "_key": "categories",
            "_mergeStrategy": [Function],
            "_processStrategy": [Function],
            "schema": Object {},
          },
        },
      },
    ],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas completeTodoSaga should call an api function and dispatch COMPLETE_TODO.SUCCESS on success 1`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [
      Object {},
    ],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas completeTodoSaga should call an api function and dispatch COMPLETE_TODO.SUCCESS on success 2`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [
      Object {
        "entities": Object {
          "todos": Object {
            "hyrule-124": Object {
              "name": "Zelda",
            },
          },
        },
        "result": Array [
          "hyrule-124",
        ],
      },
      EntitySchema {
        "_getId": [Function],
        "_idAttribute": "id",
        "_key": "todos",
        "_mergeStrategy": [Function],
        "_processStrategy": [Function],
        "schema": Object {
          "category": EntitySchema {
            "_getId": [Function],
            "_idAttribute": "id",
            "_key": "categories",
            "_mergeStrategy": [Function],
            "_processStrategy": [Function],
            "schema": Object {},
          },
        },
      },
    ],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas createTodoSaga should call ADD_TODO.ERROR on error 1`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [
      Object {},
    ],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas createTodoSaga should call an api function and dispatch ADD_TODO.SUCCESS on success 1`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [
      Object {},
    ],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas createTodoSaga should call an api function and dispatch ADD_TODO.SUCCESS on success 2`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        Object {
          "entities": Object {
            "todos": Object {
              "hyrule-123": Object {
                "name": "Link",
              },
            },
          },
          "result": Array [
            "hyrule-123",
          ],
        },
        EntitySchema {
          "_getId": [Function],
          "_idAttribute": "id",
          "_key": "todos",
          "_mergeStrategy": [Function],
          "_processStrategy": [Function],
          "schema": Object {
            "category": EntitySchema {
              "_getId": [Function],
              "_idAttribute": "id",
              "_key": "categories",
              "_mergeStrategy": [Function],
              "_processStrategy": [Function],
              "schema": Object {},
            },
          },
        },
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`todos duck sagas deleteTodoSaga should call DELETE_TODO.ERROR on error 1`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [
      Object {},
    ],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas deleteTodoSaga should call an api function and dispatch DELETE_TODO.SUCCESS on success 1`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [
      Object {},
    ],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas loadTodosSaga should call LOAD_TODOS.ERROR on error 1`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas loadTodosSaga should call an api function and dispatch LOAD_TODOS.SUCCESS on success 1`] = `
Object {
  "@@redux-saga/IO": true,
  "CALL": Object {
    "args": Array [],
    "context": null,
    "fn": [Function],
  },
}
`;

exports[`todos duck sagas loadTodosSaga should call an api function and dispatch LOAD_TODOS.SUCCESS on success 2`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        Object {
          "entities": Object {
            "categories": Object {
              "hyrule-234": Object {
                "name": "Princess saving",
              },
            },
            "todos": Object {
              "hyrule-126": Object {
                "name": "Ingo",
              },
            },
          },
        },
        Array [
          EntitySchema {
            "_getId": [Function],
            "_idAttribute": "id",
            "_key": "todos",
            "_mergeStrategy": [Function],
            "_processStrategy": [Function],
            "schema": Object {
              "category": EntitySchema {
                "_getId": [Function],
                "_idAttribute": "id",
                "_key": "categories",
                "_mergeStrategy": [Function],
                "_processStrategy": [Function],
                "schema": Object {},
              },
            },
          },
        ],
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;
